<?xml version="1.0" encoding="UTF-8"?>
<project name="dfbnc" default="default" basedir=".">
	<description>Builds, tests, and runs the project dfbnc.</description>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="libs/ant-contrib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<taskdef name="git-describe" classname="org.mdonoughe.JGitDescribeTask">
		<classpath>
			<pathelement location="libs/jgit/jgit-describe.jar" />
			<pathelement location="libs/jgit/org.eclipse.jgit-1.3.0-SNAPSHOT.jar" />
		</classpath>
	</taskdef>

	<!-- Custom user properties should go in a file called build.properties -->
	<property file="build.properties"/>
	<!-- Default Properties -->
	<property name="main.class" value="com.dfbnc.DFBnc"/>
	<property name="dist.dir" value="dist"/>
	<property name="dist.jar" value="${dist.dir}/dfbnc.jar"/>
	<property name="javadoc.dir" value="${dist.dir}/javadoc"/>
	<property name="javadoc.additionalparam" value=""/>
	<property name="javadoc.author" value="false"/>
	<property name="javadoc.encoding" value=""/>
	<property name="javadoc.noindex" value="false"/>
	<property name="javadoc.nonavbar" value="false"/>
	<property name="javadoc.notree" value="false"/>
	<property name="javadoc.private" value="false"/>
	<property name="javadoc.splitindex" value="true"/>
	<property name="javadoc.use" value="true"/>
	<property name="javadoc.version" value="false"/>
	<property name="javadoc.windowtitle" value="DFBnc"/>
	<property name="build.dir" value="build"/>
	<property name="build.classes.dir" value="${build.dir}/classes"/>
	<property name="build.classes.excludes" value="**/*.java,**/*.sh"/>
	<property name="main.src.dir" value="src"/>
	<property name="parser-common.src.dir" value="modules/parser/common/src/main/java" />
	<property name="parser-irc.src.dir" value="modules/parser/irc/src/main/java" />
        <property name="sockets.src.dir" value="modules/sockets/src" />
	<property name="akuma.src.dir" value="modules/akuma/src/main/java/" />
	<property name="util.src.dir" value="modules/util/src/" />
	<property name="libs.jars" value="libs/jna/jna.jar,libs/jna/platform.jar,libs/dagger/dagger-1.2.2.jar,libs/dagger/dagger-compiler-1.2.2.jar,libs/dagger/javawriter-2.5.0.jar,libs/dagger/javax.inject-1.jar,libs/mbassador/juel-api-2.2.7.jar,libs/mbassador/juel-impl-2.2.7.jar,libs/mbassador/juel-spi-2.2.7.jar,libs/mbassador/mbassador-1.2.4.jar,libs/guava/guava-18.0.jar,libs/jsr305/jsr305-3.0.0.jar,libs/google/auto-value-1.4-rc1.jar" />
	<propertyregex property="libs.classpath" input="${libs.jars}" regexp="," replace=":" global="true" />
	<!-- <property name="libs.jars" value="libs/jna/jna.jar:libs/jna/platform.jar" /> -->
	<var name="mergelibs" value="true"/>
	<var name="jar.compress" value="true" />
	<var name="submodlues" value="true" />
	<property name="javac.classpath" value=""/>
	<property name="javac.compilerargs" value="-Xlint:all,-processing"/>
	<property name="javac.deprecation" value="true"/>
	<property name="javac.debug" value="true"/>
	<property name="javac.source" value="1.8"/>
	<property name="javac.target" value="1.8"/>
	<property name="javac.excludes" value="" />
	<property name="test.src.dir" value="test"/>
	<property name="test.libs.jars" value="${libs.jars},libs/mockito/mockito-core-2.2.7.jar,libs/mockito/byte-buddy-1.4.33.jar,libs/mockito/objenesis-2.4.jar,libs/hamcrest/hamcrest-core-1.3.jar,libs/junit/junit-4.11.jar" />
	<propertyregex property="test.libs.classpath" input="${test.libs.jars}" regexp="," replace=":" global="true" />
	<property name="parser-common.test.src.dir" value="modules/parser/common/src/test/java"/>
	<property name="parser-irc.test.src.dir" value="modules/parser/irc/src/test/java"/>
	<property name="test.includes" value="**/*Test.java"/>
	<property name="test.build.classes.excludes" value="**/*.java,**/*.sh"/>
	<property name="test.build.classes.dir" value="${build.dir}/test/classes"/>
	<property name="test.results.dir" value="${build.dir}/test/results"/>
	<property name="test.junit.path" value="libs/junit/junit-4.11.jar"/>
	<property name="javac.test.compilerargs" value="${javac.compilerargs}"/>
	<property name="test.classpath" value="${javac.classpath}:${build.classes.dir}:${test.build.classes.dir}:${test.libs.classpath}"/>
	<property name="test.reports" value="${build.dir}/test/report"/>

	<!--
	  Initialisation
	  -->
	<target name="init" depends="submodules" description="Initialisation">
		<mkdir dir="${build.classes.dir}"/>
		<mkdir dir="${test.build.classes.dir}"/>
		<mkdir dir="${test.results.dir}"/>
		<mkdir dir="${test.reports}"/>
		<mkdir dir="${javadoc.dir}"/>
		<mkdir dir="${dist.dir}"/>
	</target>

	<!--
	  Disable lib merging.
	  -->
	<target name="nomerge" description="Disable merging of libs into jar">
		<var name="mergelibs" value="false" />
	</target>

	<!--
	  Disable jar compression
	  -->
	<target name="nocompress" description="Disable compression of output jar">
		<var name="jar.compress" value="false" />
	</target>

	<!--
	  Don;t update submodules
	  -->
	<target name="dev" description="Dev mode, don't update submodules">
		<var name="submodules" value="false" />
	</target>

	<!--
	  Make sure submodules are up to date.
	  -->
	<target name="submodules">
		<if>
			<equals arg1="${submodules}" arg2="true" />
			<then>
				<exec executable="git">
					<arg value="submodule"/>
					<arg value="init"/>
				</exec>
				<exec executable="git">
					<arg value="submodule"/>
					<arg value="update"/>
				</exec>
			</then>
		</if>
	</target>

	<!--
	  Remove existing builds
	  -->
	<target name="clean" description="Clean Up">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>

	<!--
	  Testing
	  -->
	<target name="compile-test" depends="init" description="Compile Project Tests">
		<javac excludes="${javac.excludes}" sourcepath="" srcdir="${test.src.dir}:${sockets.src.dir}:${parser-common.test.src.dir}:${parser-irc.test.src.dir}" destdir="${test.build.classes.dir}" deprecation="${javac.deprecation}" includeantruntime="false" debug="${javac.debug}">
			<classpath>
				<path path="${test.classpath}"/>
				<path path="${test.libs.classpath}"/>
			</classpath>
			<compilerarg line="${javac.test.compilerargs}"/>
		</javac>

		<copy todir="${test.build.classes.dir}">
			<fileset dir="${test.src.dir}" excludes="${test.build.classes.excludes}"/>
			<fileset dir="${parser-common.test.src.dir}" excludes="${test.build.classes.excludes}"/>
			<fileset dir="${parser-irc.test.src.dir}" excludes="${test.build.classes.excludes}"/>
		</copy>
	</target>

	<target name="test" depends="compile, compile-test">
		<junit showoutput="true" fork="true" failureproperty="tests.failed" errorproperty="tests.failed">
			<batchtest todir="${test.results.dir}">
				<fileset dir="${test.src.dir}" includes="${test.includes}"/>
				<fileset dir="${parser-common.test.src.dir}" includes="${test.includes}"/>
				<fileset dir="${parser-irc.test.src.dir}" includes="${test.includes}"/>
			</batchtest>
			<classpath>
				<path path="${test.classpath}"/>
				<path path="${test.libs.jars}"/>
			</classpath>
			<syspropertyset>
				<propertyref prefix="test-sys-prop."/>
				<mapper type="glob" from="test-sys-prop.*" to="*"/>
			</syspropertyset>
			<formatter type="brief" usefile="false"/>
			<formatter type="xml"/>
		</junit>
	</target>

	<target name="junit-report" depends="test" description="Produce a report of junit results">
		<junitreport todir="${test.reports}">
			<fileset dir="${test.results.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report todir="${test.reports}"/>
		</junitreport>
	</target>

	<!--
	  Compile
	  -->
	<target name="compile" depends="init" description="Compile Project">
		<javac excludes="${javac.excludes}" sourcepath="" srcdir="${main.src.dir}:${sockets.src.dir}:${parser-common.src.dir}:${parser-irc.src.dir}:${akuma.src.dir}:${util.src.dir}" destdir="${build.classes.dir}" deprecation="${javac.deprecation}" source="${javac.source}" target="${javac.target}" includeantruntime="false" debug="${javac.debug}">
			<classpath>
				<path path="${javac.classpath}"/>
				<path path="${libs.classpath}"/>
			</classpath>
			<compilerarg line="${javac.compilerargs}"/>
		</javac>

		<copy todir="${build.classes.dir}">
			<fileset dir="${main.src.dir}" excludes="${build.classes.excludes}"/>
			<fileset dir="${sockets.src.dir}" excludes="${build.classes.excludes}"/>
			<fileset dir="${parser-common.src.dir}" excludes="${build.classes.excludes}"/>
			<fileset dir="${parser-irc.src.dir}" excludes="${build.classes.excludes}"/>
			<fileset dir="${akuma.src.dir}" excludes="${build.classes.excludes}"/>
			<fileset dir="${util.src.dir}" excludes="${build.classes.excludes}"/>
		</copy>
	</target>

	<!--
	  Add Versioning
	  -->
	<property name="version.config" value="build/classes/com/dfbnc/version.config"/>
	<available file=".git" property="is.git"/>
	<target name="write-version-config" depends="-write-all-version"/>
	<target name="-write-all-version" depends="-write-version, -write-sockets-version, -write-parser-version, -write-akuma-version, -write-util-version"/>
	<target name="-write-version" depends="-write-version-header, -add-version"/>
	<target name="-write-version-header">
		<echo file="${version.config}"># This is a DFBnc configuration file automatically generated by
# the build process.

keysections:
   versions

versions:
   dfbnc=</echo>
	</target>
	<target name="-add-version" depends="-add-git-version"/>
	<target name="-add-git-version" if="is.git">
		<git-describe dir=".git" property="git.version" />
		<echo file="${version.config}" append="true">${git.version}
</echo>
	</target>

	<target name="-write-sockets-version" depends="-write-sockets-version-header, -add-sockets-version"/>
	<target name="-write-sockets-version-header">
		<echo file="${version.config}" append="true">   sockets=</echo>
	</target>
	<target name="-add-sockets-version" depends="-add-sockets-git-version"/>
	<target name="-add-sockets-git-version" if="is.git">
		<git-describe dir="modules/sockets/.git" property="sockets.version" />
		<echo file="${version.config}" append="true">${sockets.version}
</echo>
	</target>


	<target name="-write-parser-version" depends="-write-parser-version-header, -add-parser-version"/>
	<target name="-write-parser-version-header">
		<echo file="${version.config}" append="true">   parser=</echo>
	</target>
	<target name="-add-parser-version" depends="-add-parser-git-version"/>
	<target name="-add-parser-git-version" if="is.git">
		<git-describe dir="modules/parser/.git" property="parser.version" />
		<echo file="${version.config}" append="true">${parser.version}
</echo>
	</target>

	<target name="-write-akuma-version" depends="-write-akuma-version-header, -add-akuma-version"/>
	<target name="-write-akuma-version-header">
		<echo file="${version.config}" append="true">   akuma=</echo>
	</target>
	<target name="-add-akuma-version" depends="-add-akuma-git-version"/>
	<target name="-add-akuma-git-version" if="is.git">
		<git-describe dir="modules/akuma/.git" property="akuma.version" />
		<echo file="${version.config}" append="true">${akuma.version}
</echo>
	</target>

	<target name="-write-util-version" depends="-write-util-version-header, -add-util-version"/>
	<target name="-write-util-version-header">
		<echo file="${version.config}" append="true">   util=</echo>
	</target>
	<target name="-add-util-version" depends="-add-util-git-version"/>
	<target name="-add-util-git-version" if="is.git">
		<git-describe dir="modules/util/.git" property="util.version" />
		<echo file="${version.config}" append="true">${util.version}
</echo>
	</target>

	<!--
	  Build Jar File
	  -->
	<target name="-do-jar" depends="compile,-write-all-version" description="Build JAR.">
		<jar jarfile="${dist.jar}.temp" compress="${jar.compress}" basedir="${build.classes.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main.class}"/>
			</manifest>
		</jar>
	</target>

	<!-- Add libs to jar -->
	<target name="-merge-jar-and-libs" depends="-do-jar" description="Merge JAR and Libs">
		<delete file="${dist.jar}" />
		<zip destfile="${dist.jar}" compress="${jar.compress}" duplicate="preserve">
			<zipgroupfileset dir="" includes="${dist.jar}.temp,${libs.jars}"/>
		</zip>
		<delete file="${dist.jar}.temp" />
	</target>

	<!-- Don't add libs to jar -->
	<target name="-rename-temp-jar" depends="-do-jar" description="Rename Jar">
		<move file="${dist.jar}.temp" tofile="${dist.jar}" overwrite="true" />
	</target>

	<!-- Add libs to jar -->
	<target name="jar" depends="-do-jar" description="Build JAR and merge in libs.">
		<if>
			<equals arg1="${mergelibs}" arg2="true" />
			<then>
				<antcall target="-merge-jar-and-libs" />
			</then>
			<else>
				<antcall target="-rename-temp-jar" />
			</else>
		</if>
	</target>

	<!--
	  Build and run the jar
	  -->
	<target name="run" depends="jar" description="Build and run jar.">
		<echo message="This task is disabled due to the fact the ShutdownHook used to save settings is unable to run completely when run via ant"/>
		<echo message="Please use:"/>
		<echo message="    java -jar ${dist.jar}"/>
		<echo message="Instead."/>
		<!-- <java fork="true" spawn="true" jar="${dist.jar}"/> -->
	</target>

	<!--
	  Build Javadoc
	  -->
	<target name="javadoc" depends="init" description="Build Javadoc for source.">
		<javadoc destdir="${javadoc.dir}" source="${javac.source}" notree="${javadoc.notree}" use="${javadoc.use}" nonavbar="${javadoc.nonavbar}" noindex="${javadoc.noindex}" splitindex="${javadoc.splitindex}" author="${javadoc.author}" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}" private="${javadoc.private}" additionalparam="${javadoc.additionalparam}" failonerror="true" useexternalfile="true">
			<classpath>
				<path path="${javac.classpath}"/>
			</classpath>
			<sourcepath>
				<pathelement location="${main.src.dir}"/>
				<pathelement location="${sockets.src.dir}"/>
				<pathelement location="${parser-common.src.dir}"/>
				<pathelement location="${parser-irc.src.dir}"/>
			</sourcepath>
			<packageset dir="${main.src.dir}" includes="*/**"/>
			<fileset dir="${main.src.dir}" includes="*.java"/>
			<packageset dir="${sockets.src.dir}" includes="*/**"/>
			<fileset dir="${sockets.src.dir}" includes="*.java"/>
			<packageset dir="${parser-common.src.dir}" includes="*/**"/>
			<fileset dir="${parser-common.src.dir}" includes="*.java"/>
			<packageset dir="${parser-irc.src.dir}" includes="*/**"/>
			<fileset dir="${parser-irc.src.dir}" includes="*.java"/>
		</javadoc>
	</target>

	<!--
	  Default
	  -->
	<target name="default" depends="jar,test,javadoc" description="Build and test whole project."/>
</project>
