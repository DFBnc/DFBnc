/*
 * Copyright (c) 2006-2015 DMDirc Developers
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

task createVersionConfig {
    inputs.dir 'src'
    inputs.dir 'res'
    outputs.file new File(buildDir, 'version.config')
    dependsOn classes

    // TODO: This shouldn't shell out to git.
    ext.getGitVersion = {directory ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', "--git-dir=" + (new File(directory, ".git")).getAbsolutePath(), 'describe', '--tags'
            standardOutput = stdout
            ignoreExitValue = true
        }
        return stdout.toString().trim().isEmpty() ? "Unknown" : stdout.toString().trim();
    }

    doLast {
        def targetFile = new File(buildDir, 'version.config')
        def component, componentVersion;

        targetFile.text = ''
        targetFile << "# This is a DFBnc configuration file automatically generated by\n"
        targetFile << "# the build process.\n"
        targetFile << "\n"
        targetFile << "keysections:\n"
        targetFile << "   versions\n"
        targetFile << "\n"
        targetFile << "versions:\n"
        targetFile << "   dfbnc=" + getGitVersion(project.projectDir) + "\n"
        targetFile << "   parser=" + getGitVersion(new File(project.projectDir, "modules/parser")) + "\n"
        targetFile << "   sockets=" + getGitVersion(new File(project.projectDir, "modules/sockets")) + "\n"
    }
}

jar {
    outputs.file "dist/dfbnc.jar"
    dependsOn createVersionConfig

    exclude 'com/dfbnc/version.config'

    from("$buildDir/version.config") {
        into 'com/dfbnc/'
    }

    from { configurations.bundle.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*'
        exclude 'META-INF/maven/**'
    }

    manifest {
        attributes 'Main-Class': 'com.dfbnc.DFBnc'
    }

    doLast {
        copy {
            from jar.archivePath
            into "dist/"
            rename ".*", "dfbnc.jar"
        }
    }
}
